import os
import logging
import tempfile
from urllib.parse import urlparse

from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from pytube import YouTube
from google.cloud import vision
import requests
import ffmpeg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
OMDB_API_URL = "http://www.omdbapi.com/"

def download_video(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    if "youtube.com" in url or "youtu.be" in url:
        yt = YouTube(url)
        stream = yt.streams.filter(file_extension='mp4').first()
        temp_file = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False)
        stream.download(filename=temp_file.name)
        return temp_file.name
    else:
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ")

def extract_frame(video_path: str, timestamp: int = 5) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ–∫—É–Ω–¥–µ"""
    frame_path = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False).name
    (
        ffmpeg
        .input(video_path, ss=timestamp)
        .output(frame_path, vframes=1, qscale=0)
        .run(capture_stdout=True, capture_stderr=True)
    )
    return frame_path

def detect_content(image_path: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision API"""
    client = vision.ImageAnnotatorClient()
    
    with open(image_path, 'rb') as image_file:
        content = image_file.read()
    
    image = vision.Image(content=content)
    
    # –î–µ—Ç–µ–∫—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
    text_response = client.text_detection(image=image)
    logo_response = client.logo_detection(image=image)
    
    # –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    detected_text = [text.description for text in text_response.text_annotations]
    detected_logos = [logo.description for logo in logo_response.logo_annotations]
    
    return " ".join(detected_text + detected_logos)

def search_media(title: str) -> str:
    """–ò—â–µ—Ç –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ OMDb API"""
    params = {
        'apikey': os.getenv('OMDB_API_KEY'),
        't': title,
        'type': 'movie,series,episode',
        'plot': 'short'
    }
    
    response = requests.get(OMDB_API_URL, params=params)
    data = response.json()
    
    if data.get('Response') == 'True':
        return (
            f"üé¨ {data['Title']} ({data['Year']})\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {data['imdbRating']}/10\n"
            f"üìÄ –¢–∏–ø: {data['Type'].capitalize()}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['Plot']}"
        )
    return ""

def process_video(url: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        # –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_path = download_video(url)
        
        # –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞
        frame_path = extract_frame(video_path)
        
        # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        content = detect_content(frame_path)
        
        # –®–∞–≥ 4: –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if content:
            media_info = search_media(content)
            return media_info if media_info else f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {content}"
        
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [video_path, frame_path]:
            if path and os.path.exists(path):
                os.unlink(path)

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    update.message.reply_markdown_v2(
        f"–ü—Ä–∏–≤–µ—Ç {user.mention_markdown_v2()}\! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, "
        "–∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª!"
    )

def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    url = update.message.text
    parsed_url = urlparse(url)
    
    if not parsed_url.scheme or not parsed_url.netloc:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é URL-—Å—Å—ã–ª–∫—É")
        return
    
    update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ...")
    result = process_video(url)
    update.message.reply_text(result or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    updater = Updater(token)
    dispatcher = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    # –ó–∞–ø—É—Å–∫
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.idle()

if __name__ == '__main__':
    main()
